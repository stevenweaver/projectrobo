::::::::::::::::: Errors Fixed :::::::::::::::::

There is problem with the uImage generated by Bitbake. In Rec C our current USB HUB is not working if we use the uImage generated by Bitbake. I found out after trial and error that by Downloading  uImage-2.6.28-r17-beagleboard.bin from: <http://www.angstrom-distribution.org/demo/beagleboard/>  fixed the problem. The usb is now working. I am no sure how this is related to the version generated by Bitbake. In conclusion, it will do the job for you.

:::::::::::::::: Start: Initial setup ::::::::::::::::

REFERENCE: http://elinux.org/BeagleBoardAndOpenEmbeddedGit

> Host tools to install:

	sudo apt-get update

	sudo apt-get upgrade

	sudo apt-get install ccache sed wget cvs subversion git-core coreutils unzip texi2html texinfo libsdl1.2-dev \
	docbook-utils gawk help2man diffstat gtk-doc-tools file g++ python-psyco minicom build-essential \
	libncurses5-dev python-dev python-pysqlite2 quilt

> OE and many tools and scripts that are used contain bashisms. We therefore want to change the default "/bin/sh" to point to bash.

	sudo dpkg-reconfigure dash
	#and select no

> Ubuntu 8.10 (and later) Add settings to config directory (Prefix 60-* ensures that it overrides all other settings).

	sudo -s
	echo -e "vm.vdso_enabled = 0\nvm.mmap_min_addr = 0" > /etc/sysctl.d/60-oe-settings.conf
	exit

>And then run ( For now ignore this line. It gives an error.)

	sudo invoke-rc.d procps start



:::::::::::::::: Start: Bitbake-Packages setup ::::::::::::::::

> OpenEmbedded and Bitbake install. This part really is not that difficult after all. It will checkout the OpenEmbedded meta-data repository including the BitBake task executor.

> Set the dir where everything will be done

	mkdir oe
	export OE_HOME=$HOME/oe

> Install the OpenEmbedded meta-data using git

	cd $OE_HOME
	git clone git://git.openembedded.net/openembedded
	#or if you are behind a firewall
	git clone http://repo.or.cz/r/openembedded.git

> Create a new git branch tracking the stable branch

	cd openembedded
	git checkout origin/stable/2009 -b stable/2009

>From now on "git pull" can be used to update your repository. 

> Creating the BeagleBoard configuration and profile.We now need to tweak OpenEmbedded to fit our Beagle needs. We create a profile script that we can run whenever we feel like playing with beagle. This script will perform a few tasks. It will add bitbake to our PATH so we can run the bitbake command from anywhere. It will then export the BBPATH and BBFILES. This tells bitbake where to find it's meta-data. BBPATH will both point to our own beagleboard files and openembedded.

> But first we create a local.conf containing the most important choices we need to make. Change at least the MACHINE to beagleboard. Select angstrom-2008.1 as distro.

> NOTE: There are some issues with the gcc version of ubuntu 8.10 and later please visit: OpenEmbedded Issue

	mkdir -p $OE_HOME/beagleboard/beagleboard/conf
	cat > $OE_HOME/beagleboard/beagleboard/conf/local.conf <<_EOF
	DISTRO = "angstrom-2008.1"
	BBFILES = "$OE_HOME/openembedded/recipes/*/*.bb"
	TMPDIR = "$OE_HOME/tmp"
	MACHINE = "beagleboard"
	ENABLE_BINARY_LOCALE_GENERATION = "0"
	_EOF

> If you have a multicore machine, you can also add these two variables to speed up things (a value of 2 is safe in most cases), see here: AVOID ADDING THESE LINES!!!

	BB_NUMBER_THREADS = "2" # Depends on your machine
	PARALLEL_MAKE = "-j 2"  # Depends on your cluster

> Now we create our profile. There are TWO CHOICES here. 

> CHOICE 1) If you are going to operate directly connected to the internet (i.e. NO Proxy Firewall), then do:

	cd $OE_HOME
	cat > $OE_HOME/beagleboard/beagleboard/profile.sh <<_EOF
	export OE_HOME=\$HOME/oe
	export MY_OE_CONF="beagleboard"
	export BBPATH=\$OE_HOME/beagleboard/:\$OE_HOME/beagleboard/\$MY_OE_CONF:\$OE_HOME/openembedded
	export BBFILES="\$OE_HOME/openembedded/recipes/*/*.bb"
	export BB_ENV_EXTRAWHITE="MACHINE DISTRO ANGSTROM_MODE ANGSTROMLIBC OE_HOME"
	export PATH=\$OE_HOME/openembedded/bitbake/bin:\$PATH
	if [ "\$PS1" ]; then
	  if [ "\$BASH" ]; then
	    export PS1="\[\033[01;32m\]OE:\$MY_OE_CONF\[\033[00m\] \${PS1}"
	  fi
	fi
	_EOF


> Now make the profile executable:

	chmod +x  $OE_HOME/beagleboard/beagleboard/profile.sh

> Running: We now have finished the installation. If everything goes well we can now create images for the BeagleBoard

 	source $OE_HOME/beagleboard/beagleboard/profile.sh

> Pull down any changes from the stable/2009 git tree. 

	 cd $OE_HOME/openembedded
	 git checkout origin/stable/2009 -b stable/2009
	 git pull



==================== Start: WARNING BEFORE YOU CONTINUE READ THIS==================== 

Reference: http://wiki.openembedded.net/index.php/Gcc_issues_in_Intrepid_and_later

>If you are running and Ubuntu version >= 8.10 Follow this instructions
A: Ubuntu 8.10 (Intrepid) introduced a change to the default compiler flags. It is possible to fix this behaviour by adding the following line to your local.conf file:

>In our case *.conf is in:
 
 	sudo gedit $OE_HOME/openembedded/bitbake/conf/bitbake.conf

>Finally add the following line:

 	BUILD_CPPFLAGS += "-Wno-format-security -U_FORTIFY_SOURCE" 

====================  End: WARNING ==================== 


> Now build the console image and take a long break ( 4 hours ).

	 cd $OE_HOME
	 bitbake console-image


> If this goes well your computer will be compiling for a long time. A long time can be several hours. Once this works try using the x11-image target (bitbake x11-image) this will give you a more complete distribution ( THESE STEP IS NOT NECESSARY: IF YOU WANT TO DOWNLOAD MORE PACKETS GO FOR IT.

	bitbake x11-image

> If you receive an error of the form "ERROR: Unable to open conf/bitbake.conf" check that your profile.sh created earlier has the correct BBPATH setting (copy/pasting from this page may cause a line-break between the export command and the BBPATH var). 

> if you receive an error with module-init-utils-cross and you are running fedora 11, the glibc-static rpm has not been installed, see the list of fedora 11 packages that need to be installed above. 

:::::::::::::::::::: End: Bitbake-Packages setup :::::::::::::::::::::::::::::


##############################################################################################
	* Chris Research
##############################################################################################

> Prepare u-boot with out pinmux configuration
On page 814 of the OMAP35x Technical Reference Manual (Rev. B) you'll find a table of the various modes for each control pad register. For our configuration we need to make sure we have the UART, I2C and SPI modes active with all others set to GPIO mode. You can look int the BeagleBoard System Reference Manual on page 97 for the pins that are exposed on the expansion header.

> To do this we need to change the source code of the u-boot boot loader. By default, OE deletes the source code after it's finished with a recipe. We need to force bitbake to leave the code where it was. The following commands do this for us.

	cd $OE_HOME/openembedded

	bitbake -f -c clean -b recipes/u-boot/u-boot_git.bb
	bitbake -f -c compile -b recipes/u-boot/u-boot_git.bb

> This will clean the old u-boot files and do compile it again. Most importantly, however, it'll leave the git tree for uboot in place. You can find it in the following directory.

	:~/oe/tmp/work/beagleboard-angstrom-linux-gnueabi/u-boot-2009.05+r30			 +gitrd363f9cb0918a1b6b92e2e20d01543d0c4f53274-r30/git

///////////////// THESE STEPS ARE NOT NECESSARY SO FAR //////////////////////////////////

You'll need to open up the board/omap3/beagle/beagle.c file and make some changes. The changes need to be placed at the end of the are as follows:

	// Set default UARTs to safe mode to avoid conflicts
	MUX_VAL(CP(UART1_TX),          (IDIS | PTD | DIS | M7)) /*UART1_TX - CONFLICT - DEACTIVATE*/
    MUX_VAL(CP(UART1_RX),          (IDIS | PTD | DIS | M7)) /*UART1_RX - CONFLICT - DEACTIVATE*/
	MUX_VAL(CP(UART2_RX),          (IDIS | PTD | DIS | M7)) /*UART2_RX - CONFLICT - DEACTIVATE*/
	
	// UART2
	MUX_VAL(CP(MCBSP3_CLKX),	   (IDIS | PTD | DIS | M1)) /*UART2_TX*/
 	MUX_VAL(CP(MCBSP3_FSX),		   (IEN  | PTD | EN  | M1)) /*UART2_RX*/

	// SPI3
	MUX_VAL(CP(MMC2_CLK),          (IEN  | PTU | DIS | M1)) /*MCSPI3_CLK */
	MUX_VAL(CP(MMC2_CMD),          (IEN  | PTU | DIS | M1)) /*MCSPI3_SIMO*/
	MUX_VAL(CP(MMC2_DAT0),		   (IEN  | PTU | EN  | M1)) /*MCSPI3_SOMI*/
	MUX_VAL(CP(MMC2_DAT2),		   (IEN  | PTU | EN  | M1)) /*MCSPI3_CS1 */
	MUX_VAL(CP(MMC2_DAT3),		   (IEN  | PTU | EN  | M1)) /*MCSPI3_CS0 */

	// SPI4
	MUX_VAL(CP(MCBSP1_CLKR),	   (IEN  | PTU | DIS | M1)) /*MCSPI4_CLK */
	MUX_VAL(CP(MCBSP1_DX),         (IEN  | PTU | DIS | M1)) /*MCSPI4_SIMO*/
	MUX_VAL(CP(MCBSP4_DX),		   (IEN  | PTU | EN  | M1)) /*MCSPI4_SOMI*/
	MUX_VAL(CP(MCBSP_CLKS),	       (IEN  | PTU | EN  | M1)) /*MCSPI4_CS0 */

	// I2C
	MUX_VAL(CP(I2C2_SCL),		   (IEN  | PTU | EN  | M1)) /*I2C2_SCL*/
 	MUX_VAL(CP(I2C2_SDA),		   (IEN  | PTU | EN  | M1)) /*I2C2_SDA*/

///////////////// END: THESE STEPS ARE NOT NECESSARY SO FAR /////////////////////////////

///////////////// *** INSTEAD *** ///////////////////////////////////////////////////////

And deploy it.
	bitbake -f -c deploy -b recipes/u-boot/u-boot_git.bb


>Configuring the kernel. We are now going to create a custome kernel config and recompile in an attempt to slim the kernel and get it booting faster. A similir procedure to u-boot from above is needed to get the source code.

	bitbake -c clean linux-omap-2.6.29
	bitbake -f -c compile linux-omap-2.6.29


///////////////// *** END: INSTEAD *** //////////////////////////////////////////////////


##############################################################################################
	* end Chris Research
##############################################################################################



:::::::::::::::: Start: LinuxBootDiskFormat ::::::::::::::::

REFERENCE: http://code.google.com/p/beagleboard/wiki/LinuxBootDiskFormat

>Check to see if the automounter has mounted the SD Card. Note there may be more than one partition (only one shown in the example below).

	$ [df -h]
	Filesystem            Size  Used Avail Use% Mounted on
	...
	/dev/sdc1             400M   94M  307M  24% /media/disk
	...

> Note the "Mounted on" field in the above and use that name in the umount commands below.
If so, unmount it

	$ [umount /media/disk]

>Start fdisk: Be sure to choose the whole device (/dev/sdc), not a single partition (/dev/sdc1). In our case it was (/dev/sdb), not a single partition (/dev/sdb1)

	$ [sudo fdisk /dev/sdc]
	or
	$ [sudo fdisk /dev/sdb]

> Print the partition record: So you know your starting point. Make sure to write down the number of bytes on the card (in this example, 3963617280).

	Command (m for help): [p]

	Disk /dev/sdb: 3963 MB, 3963617280 bytes
	128 heads, 63 sectors/track, 960 cylinders
	Units = cylinders of 8064 * 512 = 4128768 bytes
	Disk identifier: 0x00000000

	   Device Boot      Start         End      Blocks   Id  System
	/dev/sdb1               2         960     3866624    b  W95 FAT32

> Delete any partitions that are there already

	Command (m for help): [d]
	Selected partition 1

> Set the Geometry of the SD Card: If the print out above does not show 255 heads, 63 sectors/track, then do the following expert mode steps to redo the SD Card:

    * Go into expert mode. 

	Command (m for help): [x]

    * Set the number of heads to 255. 

	Expert Command (m for help): [h]
	Number of heads (1-256, default xxx): [255]

    * Set the number of sectors to 63. 

	Expert Command (m for help): [s]
	Number of sectors (1-63, default xxx): [63]

    * Now Calculate the number of Cylinders for your SD Card. 

	#cylinders = FLOOR (the number of Bytes on the SD Card (from above) / 255 / 63 / 512 )

> So for this example:  3963617280 / 255 / 63 / 512 = 481.88 So we use 481 (i.e. truncate, don't round).


    * Set the number of cylinders to the number calculated. 

	Expert Command (m for help): [c]
	Number of cylinders (1-1048576, default xxx): [enter the number you calculated]

    * Return to Normal mode. 

	Expert Command (m for help): [r]

> Print the partition record to check your work

	Command (m for help): p

	Disk /dev/sdb: 3963 MB, 3963617280 bytes
	255 heads, 63 sectors/track, 481 cylinders
	Units = cylinders of 16065 * 512 = 8225280 bytes
	Disk identifier: 0x00000000

	   Device Boot      Start         End      Blocks   Id  System


> Create the FAT32 partition for booting and transferring files from Windows

	Command (m for help): [n]
	Command action
	   e   extended
	   p   primary partition (1-4)
	[p]
	Partition number (1-4): [1]
	First cylinder (1-245, default 1): [(press Enter)]
	Using default value 1
	Last cylinder or +size or +sizeM or +sizeK (1-245, default 245): [+50]

	Command (m for help): [t]
	Selected partition 1
	Hex code (type L to list codes): [c]
	Changed system type of partition 1 to c (W95 FAT32 (LBA))

> Mark it as bootable

	Command (m for help): [a]
	Partition number (1-4): [1]

> Create the Linux partition for the root file system

	Command (m for help): [n]
	Command action
	   e   extended
	   p   primary partition (1-4)
	[p]
	Partition number (1-4): [2]
	First cylinder (52-245, default 52): [(press Enter)]
	Using default value 52
	Last cylinder or +size or +sizeM or +sizeK (52-481, default 481): [(press Enter)]
	Using default value 481


> Print to Check Your Work

	Disk /dev/sdb: 3963 MB, 3963617280 bytes
	255 heads, 63 sectors/track, 481 cylinders
	Units = cylinders of 16065 * 512 = 8225280 bytes
	Disk identifier: 0x00000000

	   Device Boot      Start         End      Blocks   Id  System
	/dev/sdb1   *           1          51      409626    c  W95 FAT32 (LBA)
	/dev/sdb2              52         481     3453975   83  Linux

> Save the new partition records on the SD Card: This is an important step. All the work up to now has been temporary. 

	Command (m for help): w
	The partition table has been altered!

	Calling ioctl() to re-read partition table.

	WARNING: If you have created or modified any DOS 6.x partitions, 
	please see the fdisk manual page for additional
	information.
	Syncing disks.




:::::::::::::::: Start: Format Partitions ::::::::::::::::

> The two partitions are given the volume names LABEL1 and LABEL2 by these commands. You can substitute your own volume labels.

	micropic@micropic-desktop:~$ sudo mkfs.msdos -F 32 /dev/sdb1 -n BOOT
	mkfs.msdos 2.11 (12 Mar 2005)
    
	micropic@micropic-desktop:~$ sudo mkfs.ext3 -L LINUX /dev/sdb2
	mke2fs 1.40.8 (13-Mar-2008)
	Filesystem label=LINUX
	OS type: Linux
	Block size=4096 (log=2)
	Fragment size=4096 (log=2)
	216000 inodes, 863493 blocks
	43174 blocks (5.00%) reserved for the super user
	First data block=0
	Maximum filesystem blocks=884998144
	27 block groups
	32768 blocks per group, 32768 fragments per group
	8000 inodes per group
	Superblock backups stored on blocks: 
		32768, 98304, 163840, 229376, 294912, 819200

	Writing inode tables: done      

	Writing superblocks and filesystem accounting information: done




:::::::::::::::: Start: Copy Image to SD Card  :::::::::::::::: 

REFERENCE: http://www.pixhawk.ethz.ch/wiki/tutorials/omap/copy_sd_card

> Where sdc could also be sdc or sdd. If it was sdb, the device name of the memory card is /dev/sdc.

	sudo mkdir -p /media/BOOT
	sudo mount /dev/sdc1 /media/BOOT
	sudo mkdir -p /media/LINUX
	sudo mount /dev/sdc2 /media/LINUX

> Copy Bootloader (MLO and u-boot.bin) Download MLO and uBoot from this link (commands for shell below):

      http://www.angstrom-distribution.org/demo/beagleboard/
   


:::::::::::::::: Start: FOLLOW THIS INSTRUCTIONS FIRST ( THIS STEP IS DONE ONCE ONLY! )  :::::::::::::

>IMPORTANT: Copy MLO FIRST!. The commands below download the two files and copy them in the right order on the boot partition. You may have to adjust the filenames for future revisions.

	cd $HOME
	mkdir bbtmp
	cd bbtmp
	wget http://www.angstrom-distribution.org/demo/beagleboard/MLO

> This is the uImage we need to get USB-HUB WORKING!!!

	wget http://www.angstrom-distribution.org/demo/beagleboard/uImage-2.6.28-r17-beagleboard.bin


> And now copy the two files onto the boot partition (MLO first because of a bug in the X-loader which causes problems if MLO is not the first file written onto the boot partition). PLEASE NOTE: We need to cp the MLO file only once to our SDCard. 

	sudo cp MLO /media/BOOT/MLO	
	sudo cp uImage-2.6.28-r17-beagleboard.bin /media/BOOT/uImage


:::::::::::::::: End: FOLLOW THIS INSTRUCTIONS FIRST ( THIS STEP IS DONE ONCE ONLY! )  :::::::::::::


> Copy custom OpenEmbedded Linux Image, Linux Kernel Image and u-boot bootloader, Copy the kernel image and u-boot.

> Go to:

	cd $OE_HOME/oe/tmp/deploy/glibc/images/beagleboard
	sudo cp u-boot-beagleboard-2009.05+r30+gitrd363f9cb0918a1b6b92e2e20d01543d0c4f53274-r30.bin /media/BOOT/u-boot.bin

>Linux root filesystem: After the kernel, the root filesystem has to be copied as well. If you are overwriting an existing installation and you don't need a 100% clean system, you can just delete all files. The command below will delete all files in /media/LINUX except the lost+found directory of the EXT3 file system.

	sudo rm -rf /media/LINUX/* && sudo mkdir /media/LINUX/lost+found

> And now copy the new files. 

	sudo tar xjf x11-image-beagleboard.tar.bz2 -C /media/LINUX/

> Unmount the SD/SDHC card: Now unmount the drive either manually (by clicking the unmount icon on the desktop) or by shell command:

	sync
	sudo umount /media/BOOT
	sudo umount /media/LINUX
	sudo rm -r /media/BOOT
	sudo rm -r /media/LINUX




:::::::::::::: Start: Setting up environment variables  :::::::::::::

> Connect the SDCARD to the Beagleboard SDPort. I am currently using a mini A to mini B cable ( If you have a TI calculator they provide one usb cable of this kind. ) between Beagleboard and USB-Hub.

> STEPS

1. Connect the mini A side to the beagleboard and the mini B side to the USB-Hub. 
2. Connect a ethernet cable from the USB-Ethernet port to a port on you routher. 
3. Power the USB-Hub with a power supply ( Must be a 5volts and 1500mA supply at least ).
4. Connect the SDCard to the Beagleboard SDCard port.
5. Have a USB-Serial cable and a Null-Modem cable ready.
6. Connect the Null-Modem cable to the Beagleboard Serial port.
7. DO NOT POWER YET

> Minicom

1. Open a command terminal (Ubuntu: use Minicom)

	minicom -s

2. Configure it to be at <115200 8N1 NO NO> save it as default and exit minicom

3. Type
	minicom -o

4. Finally provide power to the beagleboard.

5. Press any key to interrupt boot process you should see this:

	*************tobe continue::::LKJl;kjlk;jl;kj


> Global settings: Note: Black Memory (Kingston MricroSD) is running on rootfsype=ext2 instead of ext3


> If you are using the 2.6.27 kernel: * At the U-Boot prompt, enter: 

        OMAP3 beagleboard.org # setenv bootargs 'console=ttyS2,115200n8 console=tty0 root=/dev/mmcblk0p2 rootdelay=2 rootfstype=ext2 video=omapfb:vram:2M,vram:4M'

> If you are using the 2.6.28 kernel (the latest): * At the U-Boot prompt, enter: 

        OMAP3 beagleboard.org # setenv bootargs 'console=ttyS2,115200n8 console=tty0 root=/dev/mmcblk0p2 rw rootfstype=ext3 rootwait omapfb.video_mode=1024x768MR-16@60'

> Old version
	setenv bootargs 'console=ttyS2,115200n8 console=tty0 root=/dev/mmcblk0p2 rootdelay=2 rootfstype=ext3 video=omapfb:vram:2M,vram:4M'


> In either case, enter: 
	setenv bootcmd 'mmc init; fatload mmc 0 0x80300000 uImage; bootm 0x80300000'
	saveenv

> Hack:

setenv bootargs 'console=ttyS2,115200n8 console=tty0 root=/dev/mmcblk0p2 rw rootfstype=ext2 rootwait
omapfb.video_mode=1024x768MR-16@60'
setenv bootcmd 'mmcinit; fatload mmc 0 0x80300000 uImage.bin; bootm 0x80300000'
run bootcmd 





:::::::::::::: OPKG Package installation :::::::::::::: 


Setup "C" build environment:
opkg install gcc
opkg install gcc-symlinks
opkg install libc6-dev
opkg install binutils
opkg install make

Additional packages we installed to setup C++ build environment:
opkg install g++
opkg install g++-symlinks
opkg install libstdc++-dev
opkg install libstdc++6

Setup Java:
opkg install jamvm

Setup Apache web server:
opkg install apache2
opkg install apache2-doc 

Setup i2ctools:
i2c-tools-doc i2c-tools-dev i2c-tools-dbg i2c-tools


> First Update opkg installer repository

	opkg update

> Copy and Paste the following (C/C++ Libs):

	opkg install g++ g++-symlinks libstdc++-dev libstdc++6 gcc gcc-symlinks libc6-dev binutils make minicom

> Copy and Paste the following (Boost C++, XMLRPC, etc):

        opkg install libcv2 fftw fftw-dev boost-date-time boost-dbg boost-dev boost-filesystem boost-graph boost-iostreams boost-program-options boost-regex boost-signals boost-system boost-test boost-thread

> Copy and Paste the following (i2c Tools):

        opkg install i2c-tools-doc i2c-tools-dev i2c-tools-dbg i2c-tools


:::::::::::::: BeagleBoard Recipes ::::::::::::::
Reference: http://projects.linuxtogo.org/pipermail/openembedded-devel/2009-June/011965.html
Recipe: LibSerial 0.6.0rc1


> Get source from SVN or direct link
	
	cd /tmp
	svn co https://libserial.svn.sourceforge.net/svnroot/libserial libserial 
> Or
	wget 'http://sourceforge.net/projects/libserial/files/libserial/0.6.0rc1/libserial-0.6.0rc1.tar.gz/download'
	tar xvvzf libserial-*
	cd libserial*

> Make autotools-friendly

	touch Makefile.am
	*sudo gedit configure.in
	automake --add-missing
	touch NEWS AUTHORS ChangeLog

> Open <configure.in> and add the following under AM_CONFIG_HEADER(config.h)

	AC_CONFIG_MACRO_DIR([m4])

> Open <Makefile.am> and add the following in the end of the file

	ACLOCAL_AMFLAGS = -I m4

> Finally run libtoolize
	
	libtoolize


> There should be no warning messages anymore
 
	*aclocal
	*autoconf
	automake --add-missing
	

> Finally run

	autoreconf


> Make tarball ( Make sure there are NO other level (directories) before the original files and folders ). When you untar the folder you should get: examples, doc, m4, sip, src, autom4te.cache and a bouch of files. 

	tar cvzf libserial-0.5.2.tar.gz ./*

> Create a Folder <files> in

	cd $OE_HOME/openembedded/recipes/libserial
	mkdir files


> Move the tarball to the <files> folder created earlier

	mv libserial-0.5.2.tar.gz $OE_HOME/openembedded/recipes/libserial/files/


> Create a recipe in $OE_HOME/openembedded/recipes/libserial

	vi libserial_0.6.0rc1.bb


> Add the following (for now this is a hack to make it work)

	DESCRIPTION = "C++ library for serial port support."
	SECTION = "libs"
	LICENSE = "GPL"
	HOMEPAGE = "http://libserial.sourceforge.net/mediawiki/index.php/Main_Page"
	PV = "0.6.0rc1"

	SRC_URI = "file://libserial-${PV}.tar.gz"

	S = "${WORKDIR}"

	inherit autotools pkgconfig

	do_compile() {
		oe_runmake SUBDIRS=src
	}

	do_stage() {
		autotools_stage_all
	}


> Try to compile again

	bitbake libserial


> Clean files if there are errors

	 bitbake -c clean -b recipes/libserial/libserial_*


> Finally, there will be 3 files created in $OE_HOME/tmp/deploy/glibc/ipk/armv7a
	
	libserial0_0.6.0rc1-r0.1_armv7a.ipk
	libserial-dbg_0.6.0rc1-r0.1_armv7a.ipk
	libserial-dev_0.6.0rc1-r0.1_armv7a.ipk


> We are going to transfer the files using scp to the Beagleboard ( I created a folder under </home/root/libserial> to save the files in the Beagleboard side.

	scp libserial0_0.6.0rc1-r0.1_armv7a.ipk root@192.168.2.119:/home/root/libserial
	scp libserial-dbg_0.6.0rc1-r0.1_armv7a.ipk root@192.168.2.119:/home/root/libserial
	scp libserial-dev_0.6.0rc1-r0.1_armv7a.ipk  root@192.168.2.119:/home/root/libserial


> Now, we need to be in the Beagleboard side and run this to install the packages

	opkg install libserial0_0.6.0rc1-r0.1_armv7a.ipk libserial-d
ev_0.6.0rc1-r0.1_armv7a.ipk libserial-dbg_0.6.0rc1-r0.1_armv7a.ipk 

	

:::::::::::::: BeagleBoard PinMux Configuration ::::::::::::::
Reference: http://elinux.org/BeagleBoardPinMux

to be continue...



:::::::::::::: BeagleBoard UART2 for Communication with Microcontroller :::::::::::::: 
Reference: BeagleBoard System Reference Manual (rev. C3.0) Page

> According to Table 20. Expansion Connector Signals, We can access UART2 RX and TX from pins 6 and 8 respectively. To test UART2 you need to run minicom (if already installed) and configure the port to <ttyS2>. Connect a wire that joins pin 6 and 8 together and proceed with typing any key from the keyboard. You should be able to see the keys value in the terminal. 


